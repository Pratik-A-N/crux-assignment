# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XueeZzVbAEWR1dCt69DYUVXm_rs9T6GM
"""

import sqlparse
from sqlparse.sql import Identifier, Where, Comparison, TokenList, Parenthesis
from sqlparse.tokens import Keyword, DML

# function to separate the range after the BETWEEN Keyword
def handle_between_clause(tokenList, curr_idx):
    column = tokenList.token_prev(curr_idx)[1].get_real_name()
    range = []
    count = 3
    while count > 0:
      next_node = tokenList.token_next(curr_idx)
      if count == 1 or count == 3:
        range.append(convert_value(next_node[1].value.strip("'")))

      curr_idx = tokenList.token_index(next_node[1])
      count -= 1

    return {"column": column, "value": range}

# function to handle the IN Clause value types
def handle_in_clause(where_clause,curr_idx):
    column = where_clause.token_prev(curr_idx)[1].get_real_name()
    tokenList = where_clause.token_next(curr_idx)[1]
    is_subquery = False
    for token in tokenList:
        if token.ttype is DML:
            is_subquery = True
            break

    # if the value is a subquery
    if is_subquery:
        return {"column": column, "value": "Sub Query"}
    # if the value is a list
    else:
        value = []
        for token in tokenList:
            if token.ttype is None:
                for subToken in token:
                  if subToken.value != ',' and subToken.value != ' ' :
                      value.append(convert_value(subToken.value.strip("'")))

        return {"column": column, "value": value}

# function to check NULL and NOT NULL
def handle_is_clause(tokenList,curr_idx):
    column = tokenList.token_prev(curr_idx)[1].get_real_name()
    next = tokenList.token_next(curr_idx)[1]
    if next.value.upper() == 'NULL':
        return { "column": column, "value": "NULL"}
    else :
        return { "column": column, "value": "NOT NULL"}

# function to return the payload
def insert_condition(table_name, column_name, operator, value):
    return {
              'table_name': table_name,
              'column_name': column_name,
              'operator': operator,
              'value': value
           }

# function to convert string value to number if number is present in string
def convert_value(value):
    if value.isdigit():
        return int(value)
    try:
        return float(value)
    except ValueError:
        return value

# main function which helps to get the details of WHERE clause
def extract_where_details(sql):
    parsed = sqlparse.parse(sql)
    # assuming one sql query is passed in one string
    stmt = parsed[0]

    # dictionary to store Real Table name and there alias
    table_aliases = {}

    # each sql query is borken into tokens for processing
    def process_tokens(tokens):
      table_name = None
      from_seen = False
      for token in tokens:
        if token.ttype is DML and token.value.upper() == 'SELECT':
            continue
        if token.ttype is Keyword and token.value.upper() == 'FROM':
            from_seen = True
            continue
        if from_seen and isinstance(token, Identifier):
            table_name = token.get_real_name()
            table_aliases[token.get_alias() or table_name] = table_name
            from_seen = False
        # from_seen is made true to store the other table name in Queries that contain joins
        if token.ttype is Keyword and token.value.upper() == 'JOIN':
            from_seen = True
        # breaking once we got the outer most 'WHERE' clause
        if isinstance(token, Where):
            return token, table_name


    process = process_tokens(stmt.tokens)

    where_clause = None
    table_name = None

    if process:
      where_clause = process[0]
      table_name = process[1]

    if where_clause is None:
        return 'N/A'

    # Extract conditions from the WHERE clause
    conditions = []
    columns = []
    # the where clause in itself is a list of token which helps to identify column name, operator and value
    for token in where_clause.tokens:
        curr_idx = where_clause.token_index(token)
        # Case when IN operator is used
        if token.value.upper() == 'IN':
            data = handle_in_clause(where_clause,curr_idx)
            if where_clause.token_prev(curr_idx)[1].get_parent_name() != None:
                parent = table_aliases[where_clause.token_prev(curr_idx)[1].get_parent_name()]
                conditions.append(insert_condition(parent,data['column'],'IN',data['value']))
            else :
                conditions.append(insert_condition(table_name,data['column'],'IN',data['value']))

        # Case when BETWEEN operator is used
        if token.value.upper() == 'BETWEEN':
            data = handle_between_clause(where_clause,curr_idx)
            if where_clause.token_prev(curr_idx)[1].get_parent_name() != None:
                parent = table_aliases[where_clause.token_prev(curr_idx)[1].get_parent_name()]
                conditions.append(insert_condition(parent,data['column'],'BETWEEN',data['value']))
            else :
                conditions.append(insert_condition(table_name,data['column'],'BETWEEN',data['value']))

        # Case when IS NULL/ IS NOT NULL operator is used
        if token.value.upper() == 'IS':
            data = handle_is_clause(where_clause,curr_idx)
            if where_clause.token_prev(curr_idx)[1].get_parent_name() != None:
                parent = table_aliases[where_clause.token_prev(curr_idx)[1].get_parent_name()]
                conditions.append(insert_condition(parent,data['column'],'IS ',data['value']))
            else :
                conditions.append(insert_condition(table_name,data['column'],'IS ',data['value']))

        # Case when NOT operator is used
        if token.value.upper() == 'NOT':
            column = where_clause.token_prev(curr_idx)[1].get_real_name()
            next = where_clause.token_next(curr_idx)[1]
            if next.value.upper == 'IN':
                data = handle_in_clause(where_clause,curr_idx)
                if where_clause.token_prev(curr_idx)[1].get_parent_name() != None:
                    parent = table_aliases[where_clause.token_prev(curr_idx)[1].get_parent_name()]
                    conditions.append(insert_condition(parent,data['NOT IN'],'IN',data['value']))
                else :
                    conditions.append(insert_condition(table_name,data['NOT IN'],'IN',data['value']))


            if next.value.upper == 'BETWEEN':
                data = handle_between_clause(where_clause,curr_idx)
                if where_clause.token_prev(curr_idx)[1].get_parent_name() != None:
                    parent = table_aliases[where_clause.token_prev(curr_idx)[1].get_parent_name()]
                    conditions.append(insert_condition(parent,data['NOT BETWEEN'],'IN',data['value']))
                else :
                    conditions.append(insert_condition(table_name,data['NOT BETWEEN'],'IN',data['value']))


        # Case where comparsion operators are used for e.g. >, <, =, <>, LIKE, NOT LIKE
        if isinstance(token, Comparison):
            column = token.token_first().get_real_name()
            operator = token.token_next(0)[1]
            value = token.token_next(token.token_index(operator))[1]
            if token.token_first().get_parent_name() != None:
                parent = table_aliases[token.token_first().get_parent_name()]
                conditions.append(insert_condition(parent,column,operator.value,convert_value(value.value.strip("'"))))
            else :
                conditions.append(insert_condition(table_name,column,operator.value,convert_value(value.value.strip("'"))))

    return conditions

# Example test cases
queries = [
    "SELECT * FROM users WHERE user_id = 123;",
    "SELECT * FROM users WHERE user_id IS NULL",
    "SELECT * FROM users WHERE user_id BETWEEN 30000 AND 45000",
    "SELECT u.name FROM users u WHERE u.age > 30;",
    "SELECT SupplierID, Name, Address FROM Suppliers WHERE Name LIKE '_ango%'",
    "SELECT SupplierID, Name, Address FROM Suppliers WHERE Name NOT LIKE '_ango%'",
    "SELECT * FROM orders WHERE order_id IN (30000, 40000, 25000) AND status = 'Shipped';",
    "SELECT * FROM orders WHERE order_id IN (SELECT order_id FROM order_details WHERE quantity > 10) AND status = 'Shipped';",
    "SELECT a.name, b.salary FROM employees a JOIN payroll b ON a.emp_id = b.emp_id WHERE a.department IN (30000, 40000, 25000) AND b.salary > 50000;",
    "SELECT a.name, b.salary FROM employees a JOIN payroll b ON a.emp_id = b.emp_id WHERE a.department = 'Sales' AND b.salary > 50000;",
    "SELECT name FROM (SELECT * FROM employees WHERE department = 'HR') AS dept_hr;",
    "WITH recent_sales AS (SELECT product_id, sale_date, amount FROM sales WHERE sale_date > '2023-01-01') SELECT * FROM recent_sales WHERE amount >= 1000;"
]

for query in queries:
    print(f"Query: {query}")
    print("Output:", extract_where_details(query) )
    print()